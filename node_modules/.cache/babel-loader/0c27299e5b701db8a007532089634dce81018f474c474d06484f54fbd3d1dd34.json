{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shobhit Tomar\\\\Desktop\\\\ReactJs\\\\textutils\\\\src\\\\components\\\\TextForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TextForm(props) {\n  _s();\n  const [myStyle, setMyStyle] = useState({\n    color: black,\n    background: white\n  });\n  const handleUpClick = () => {\n    console.log(\"You clicked Uppercase\" + text);\n    let newText = text.toUpperCase();\n    setText(newText);\n  };\n  const handleLoClick = () => {\n    let newText = text.toLowerCase();\n    setText(newText);\n  };\n  const handleItClick = () => {\n    let newText = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"font-italic\",\n      children: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 19\n    }, this);\n    setText(newText);\n  };\n  const handleOnChange = event => {\n    console.log(\"On change\");\n    setText(event.target.value);\n  };\n  const [text, setText] = useState(\"Enter text here\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"accordion\",\n      id: \"accordionExample\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"accordion-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"accordion-header\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"accordion-button\",\n            type: \"button\",\n            \"data-bs-toggle\": \"collapse\",\n            \"data-bs-target\": \"#collapseOne\",\n            \"aria-expanded\": \"true\",\n            \"aria-controls\": \"collapseOne\",\n            children: \"Accordion Item #1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"collapseOne\",\n          className: \"accordion-collapse collapse show\",\n          \"data-bs-parent\": \"#accordionExample\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"accordion-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"This is the first item's accordion body.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 15\n            }, this), \" It is shown by default, until the collapse plugin adds the appropriate className es that we use to style each element. These className es control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \".accordion-body\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 48\n            }, this), \", though the transition does limit overflow.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"accordion-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"accordion-header\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"accordion-button collapsed\",\n            type: \"button\",\n            \"data-bs-toggle\": \"collapse\",\n            \"data-bs-target\": \"#collapseTwo\",\n            \"aria-expanded\": \"false\",\n            \"aria-controls\": \"collapseTwo\",\n            children: \"Accordion Item #2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"collapseTwo\",\n          className: \"accordion-collapse collapse\",\n          \"data-bs-parent\": \"#accordionExample\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"accordion-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"This is the second item's accordion body.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 15\n            }, this), \" It is hidden by default, until the collapse plugin adds the appropriate className es that we use to style each element. These className es control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \".accordion-body\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 48\n            }, this), \", though the transition does limit overflow.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"accordion-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"accordion-header\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"accordion-button collapsed\",\n            type: \"button\",\n            \"data-bs-toggle\": \"collapse\",\n            \"data-bs-target\": \"#collapseThree\",\n            \"aria-expanded\": \"false\",\n            \"aria-controls\": \"collapseThree\",\n            children: \"Accordion Item #3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"collapseThree\",\n          className: \"accordion-collapse collapse\",\n          \"data-bs-parent\": \"#accordionExample\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"accordion-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"This is the third item's accordion body.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 15\n            }, this), \" It is hidden by default, until the collapse plugin adds the appropriate className es that we use to style each element. These className es control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \".accordion-body\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 48\n            }, this), \", though the transition does limit overflow.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-danger my-3\",\n        children: \" Enable Dark Mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(TextForm, \"ChJnOqkw2fG9vbguCx/RwoL8GQ8=\");\n_c = TextForm;\nvar _c;\n$RefreshReg$(_c, \"TextForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","TextForm","props","_s","myStyle","setMyStyle","color","black","background","white","handleUpClick","console","log","text","newText","toUpperCase","setText","handleLoClick","toLowerCase","handleItClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","handleOnChange","event","target","value","id","type","_c","$RefreshReg$"],"sources":["C:/Users/Shobhit Tomar/Desktop/ReactJs/textutils/src/components/TextForm.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const [myStyle,setMyStyle] = useState({\r\n    color:black,\r\n    background:white\r\n  })\r\n\r\n  const handleUpClick = () => {\r\n    console.log(\"You clicked Uppercase\" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n  };\r\n  const handleLoClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n  };\r\n  const handleItClick = () => {\r\n    let newText = <p className=\"font-italic\">text</p>;\r\n    setText(newText);\r\n  };\r\n  const handleOnChange = (event) => {\r\n    console.log(\"On change\");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const [text, setText] = useState(\"Enter text here\");\r\n\r\n  return (\r\n    <>\r\n      <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              className es that we use to style each element. These className es\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              className es that we use to style each element. These className es\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              className es that we use to style each element. These className es\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <button className=\"btn btn-danger my-3\" > Enable Dark Mode</button>\r\n      </div>\r\n\r\n      {/* <div className Name=\"container\">\r\n      <h1>{props.heading}</h1>\r\n      <div className Name=\"mb-3\">\r\n        <textarea\r\n          className Name=\"form-control\"\r\n          value={text}\r\n          onChange={handleOnChange}\r\n          id=\"myBox\"\r\n          rows=\"15\"\r\n        ></textarea>\r\n      </div>\r\n      <button className Name=\"btn btn-danger mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n      <button className Name=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n      <button className Name=\"btn btn-primary mx-2\" onClick={handleItClick}>Convert to Italic</button>\r\n    </div>\r\n    <div className Name=\"container my-3\">\r\n      <h1>Text Summary</h1>\r\n      <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n      <p>{0.008 * text.split(\" \").length} minutes to read</p>\r\n      <h2>Preview</h2>\r\n      <p>{text}</p>\r\n    </div> */}\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}